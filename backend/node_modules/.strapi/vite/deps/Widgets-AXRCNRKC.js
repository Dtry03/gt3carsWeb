import {
  RelativeTime,
  getBadgeProps
} from "./chunk-5KK7BDCN.js";
import "./chunk-Z4EXHRDW.js";
import "./chunk-EBVWQ5LF.js";
import "./chunk-2VITKBZR.js";
import "./chunk-45UP4FU3.js";
import "./chunk-ICWRO22X.js";
import "./chunk-6USKMVGO.js";
import "./chunk-C7H2BX76.js";
import "./chunk-W5TYOZYN.js";
import {
  Widget
} from "./chunk-4UOV4T25.js";
import "./chunk-NJ7KRAGB.js";
import "./chunk-S7MWHU36.js";
import "./chunk-PO4DORTO.js";
import "./chunk-QIJGNK42.js";
import "./chunk-PUBP6SXU.js";
import "./chunk-UJGUTD3Y.js";
import "./chunk-WR277TY5.js";
import "./chunk-5VYB2C4O.js";
import "./chunk-ZCA6RYNR.js";
import "./chunk-3NIOQIUN.js";
import "./chunk-LXGVQGYT.js";
import "./chunk-PABWJEUV.js";
import "./chunk-5OLE3XNE.js";
import "./chunk-T2H275BP.js";
import "./chunk-DNR6HF36.js";
import "./chunk-343HBDFX.js";
import "./chunk-X6HHUI3X.js";
import "./chunk-JQ7KVUEP.js";
import "./chunk-ICIUIWZI.js";
import "./chunk-RDY2OUW3.js";
import "./chunk-PFG4ZASG.js";
import "./chunk-LLJNU3IX.js";
import "./chunk-UA3SUHF3.js";
import "./chunk-HOYJRKYC.js";
import "./chunk-332DFF7K.js";
import "./chunk-UOJ7ANUC.js";
import "./chunk-LHECCKXZ.js";
import "./chunk-TZ4GSDRL.js";
import "./chunk-XV4FLPNJ.js";
import "./chunk-U7PU7GOD.js";
import "./chunk-RDGCZRH5.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-TPUIRTUP.js";
import "./chunk-NQSRW5O3.js";
import "./chunk-U4XGJ4WV.js";
import "./chunk-XBURYK6X.js";
import {
  useTracking
} from "./chunk-PPLLFGE7.js";
import "./chunk-JORQMZ3L.js";
import "./chunk-OHWPYT75.js";
import "./chunk-PQINNV4N.js";
import "./chunk-ZPH6YYXY.js";
import "./chunk-A63NJJNJ.js";
import "./chunk-4T27DKXG.js";
import "./chunk-N7JCE3H3.js";
import "./chunk-BGOMOG55.js";
import {
  adminApi
} from "./chunk-2PFIN62Y.js";
import "./chunk-ZZGLQR55.js";
import "./chunk-5AMSERGP.js";
import "./chunk-56SYTDJ2.js";
import "./chunk-ZGCR6WZZ.js";
import "./chunk-QOUV5O5E.js";
import {
  Badge,
  Box,
  IconButton,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-IBMY2VY5.js";
import "./chunk-SPTT7VBO.js";
import {
  Link,
  useNavigate
} from "./chunk-MEXSUURY.js";
import "./chunk-2MEY62DJ.js";
import {
  ForwardRef$1z
} from "./chunk-VKBWGUCP.js";
import {
  require_jsx_runtime
} from "./chunk-YHVPSBF3.js";
import {
  dt
} from "./chunk-VLINXRKQ.js";
import "./chunk-3ZCHZDHB.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-releases/dist/admin/components/Widgets.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);

// node_modules/@strapi/content-releases/dist/admin/services/homepage.mjs
var contentManagerApi = adminApi.enhanceEndpoints({
  addTagTypes: [
    "UpcomingReleasesList"
  ]
}).injectEndpoints({
  endpoints: (builder) => ({
    getUpcomingReleases: builder.query({
      query: () => "/content-releases/homepage/upcoming-releases",
      transformResponse: (response) => response.data,
      providesTags: (_, _err) => [
        "UpcomingReleasesList"
      ]
    })
  }),
  overrideExisting: true
});
var { useGetUpcomingReleasesQuery } = contentManagerApi;

// node_modules/@strapi/content-releases/dist/admin/components/Widgets.mjs
var CellTypography = dt(Typography)`
  display: block;
  max-width: 14.4rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var ReleasesTable = ({ items }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (item) => {
    return `/plugins/content-releases/${item.id}`;
  };
  const handleRowClick = (item) => () => {
    trackUsage("willEditReleaseFromHome");
    const link = getEditViewLink(item);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, {
    colCount: 4,
    rowCount: (items == null ? void 0 : items.length) ?? 0,
    children: (0, import_jsx_runtime.jsx)(Tbody, {
      children: items == null ? void 0 : items.map((item) => (0, import_jsx_runtime.jsxs)(Tr, {
        onClick: handleRowClick(item),
        cursor: "pointer",
        children: [
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              title: item.name,
              variant: "omega",
              textColor: "neutral800",
              children: item.name
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: item.status ? (0, import_jsx_runtime.jsx)(Badge, {
                ...getBadgeProps(item.status),
                children: item.status
              }) : (0, import_jsx_runtime.jsx)(Typography, {
                textColor: "neutral600",
                "aria-hidden": true,
                children: "-"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Typography, {
              variant: "omega",
              textTransform: "capitalize",
              textColor: "neutral600",
              children: item.scheduledAt ? (0, import_jsx_runtime.jsx)(RelativeTime, {
                timestamp: new Date(item.scheduledAt)
              }) : formatMessage({
                id: "content-releases.pages.Releases.not-scheduled",
                defaultMessage: "Not scheduled"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            onClick: (e) => e.stopPropagation(),
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: (0, import_jsx_runtime.jsx)(IconButton, {
                tag: Link,
                to: getEditViewLink(item),
                onClick: () => trackUsage("willEditReleaseFromHome"),
                label: formatMessage({
                  id: "content-manager.actions.edit.label",
                  defaultMessage: "Edit"
                }),
                variant: "ghost",
                children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
              })
            })
          })
        ]
      }, item.documentId))
    })
  });
};
var UpcomingReleasesWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetUpcomingReleasesQuery();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, {
      children: formatMessage({
        id: "content-releases.widget.upcoming-releases.no-data",
        defaultMessage: "No releases"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(ReleasesTable, {
    items: data
  });
};
export {
  UpcomingReleasesWidget
};
//# sourceMappingURL=Widgets-AXRCNRKC.js.map
